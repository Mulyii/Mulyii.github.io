<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>dp题单</title>
    <url>/2022/11/15/dp%E9%A2%98%E5%8D%95/</url>
    <content><![CDATA[<p>这里多数问题只做简单解释，对部分题目给出链接细说。</p>
<p><a href="https://codeforces.com/problemset/problem/1513/C">Add One</a><br><a href="https://codeforces.com/problemset/problem/1733/D2">Zero-One</a><br><a href="https://atcoder.jp/contests/abc271/tasks/abc271_e">Subsequence Path</a><br><a href="https://codeforces.com/contest/1740/problem/E">Hanging Hearts</a><br><a href="https://atcoder.jp/contests/abl/tasks/abl_d">Flat Subsequence</a><br><a href="https://atcoder.jp/contests/abc184/tasks/abc184_d">increment of coins</a></p>
]]></content>
      <categories>
        <category>做题记录</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>2022CCPC河南省赛题解</title>
    <url>/2022/10/20/2022CCPC%E6%B2%B3%E5%8D%97%E7%9C%81%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p><a href="https://codeforces.com/gym/103941">传送门</a></p>
<h3 id="A-Mocha-上小班啦"><a href="#A-Mocha-上小班啦" class="headerlink" title="A Mocha 上小班啦"></a>A Mocha 上小班啦</h3><p>签到，交换$01$位置输出即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line">string tab = <span class="string">&quot;1023456789&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; tab.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            cout &lt;&lt; tab[i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="B-Hash"><a href="#B-Hash" class="headerlink" title="B Hash"></a>B Hash</h3><p>考虑子串的长度不大于$15$的情况(官方题解说只要考虑这种情况就行了)，然后dp就行了。只需证明长度为$16$的字串必然会存在一个划分使得产生的价值大于不划分产生的价值。具体看官方题解吧，这个证明我也说不太清（现场的话应该可以猜字串长度不会太大来做）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mp</span><span class="params">(<span class="type">char</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="string">&#x27;a&#x27;</span>) res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="string">&#x27;e&#x27;</span>) res = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="string">&#x27;h&#x27;</span>) res = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="string">&#x27;n&#x27;</span>) res = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">    s = s + s;</span><br><span class="line">    <span class="function">vector&lt;ll&gt; <span class="title">d</span><span class="params">(<span class="number">16</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!i) d[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> d[i] = <span class="number">31</span> * d[i - <span class="number">1</span>];</span><br><span class="line">        d[i] %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">1</span>; l &lt;= <span class="number">15</span>; l ++) &#123;</span><br><span class="line">        <span class="type">int</span> r = l + n;</span><br><span class="line">        <span class="function">vector&lt;ll&gt; <span class="title">dp</span> <span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">            ll t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i, x = <span class="number">0</span>; j &gt; <span class="built_in">max</span>(<span class="number">0</span>, i - <span class="number">15</span>); j --, x ++) &#123;</span><br><span class="line">                t += <span class="built_in">mp</span>(s[l + j - <span class="number">1</span>]) * d[x];</span><br><span class="line">                t %= mod;</span><br><span class="line">                dp[i] = <span class="built_in">max</span>(dp[i], dp[j - <span class="number">1</span>] + t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        res = <span class="built_in">max</span>(res, dp[n]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="E-Serval-的俳句"><a href="#E-Serval-的俳句" class="headerlink" title="E Serval 的俳句"></a>E Serval 的俳句</h3><p>记录每个字母出现的位置，考虑三段组成的字母，第一段取字母的前5个并记录最后一个字母的位置，第二段找到从记录的位置开始，取7个，再记录最后一个字母的位置，第三段同理。时间复杂度$O(26^3log|S|)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    string s;</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pos</span>(<span class="number">26</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        pos[s[i] - <span class="string">&#x27;a&#x27;</span>].<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i ++) <span class="keyword">if</span>(pos[i].<span class="built_in">size</span>() &gt;= <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="type">int</span> x1 = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j ++) &#123;</span><br><span class="line">            <span class="type">int</span> c = <span class="built_in">upper_bound</span>(pos[j].<span class="built_in">begin</span>(), pos[j].<span class="built_in">end</span>(), pos[i][x1]) - pos[j].<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">if</span>(pos[j].<span class="built_in">size</span>() - c &lt; <span class="number">7</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> x2 = c + <span class="number">6</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; k ++) &#123;</span><br><span class="line">                <span class="type">int</span> c = <span class="built_in">upper_bound</span>(pos[k].<span class="built_in">begin</span>(), pos[k].<span class="built_in">end</span>(), pos[j][x2]) - pos[k].<span class="built_in">begin</span>();</span><br><span class="line">                <span class="keyword">if</span>(pos[k].<span class="built_in">size</span>() - c &lt; <span class="number">5</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> x3 = c + <span class="number">4</span>;</span><br><span class="line">                <span class="type">char</span> x = <span class="string">&#x27;a&#x27;</span> + i, y = <span class="string">&#x27;a&#x27;</span> + j, z = <span class="string">&#x27;a&#x27;</span> + k;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">5</span>; t ++) &#123;</span><br><span class="line">                    cout &lt;&lt; x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">7</span>; t ++) &#123;</span><br><span class="line">                    cout &lt;&lt; y;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">0</span>; t &lt; <span class="number">5</span>; t ++) &#123;</span><br><span class="line">                    cout &lt;&lt; z;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;none\n&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="F-集合之和"><a href="#F-集合之和" class="headerlink" title="F 集合之和"></a>F 集合之和</h3><p>这题卡了很久，以为要求使$n$最小。。。<br>如果是一个等差数列的话，矩阵中的任意一点的值为$O(2a_0 + (i + j)k)$，发现$n$大小的数列能够产生$2n - 1$个不同的数，故对所有的奇数都成立。若前三个数不等差，那么会产生$6$个数，后面每多一个数与前一个数等差，会多产生两个数，故对于所有大于等于$6$的偶数都有解。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> x = (n + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        cout &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i ++) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt;= <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x = n / <span class="number">2</span>;</span><br><span class="line">            cout &lt;&lt; x &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">1</span>; j &lt;= x; i ++, j ++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">2</span>) &#123;</span><br><span class="line">                    i ++;</span><br><span class="line">                &#125;</span><br><span class="line">                cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="G-Mocha-上大班啦"><a href="#G-Mocha-上大班啦" class="headerlink" title="G Mocha 上大班啦"></a>G Mocha 上大班啦</h3><p>诈骗题。&amp;运算只会使$0$减少，不会增加，那么对全部数进行&amp;运算就是求每一位都为$1$的个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; (m));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        string s;</span><br><span class="line">        cin &gt;&gt; s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line">            v[i][j] = s[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">OP</span> &#123;</span><br><span class="line">        <span class="type">int</span> i, j, l, r, p;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="function">vector&lt;OP&gt; <span class="title">op</span><span class="params">(q)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;[i, j, l, r, p] : op) &#123;</span><br><span class="line">        cin &gt;&gt; i &gt;&gt; j &gt;&gt; l &gt;&gt; r &gt;&gt; p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j ++) &#123;</span><br><span class="line">            c &amp;= v[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">        res += c;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; res &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="H-旋转水管"><a href="#H-旋转水管" class="headerlink" title="H 旋转水管"></a>H 旋转水管</h3><p>dfs模拟，分类讨论即可, 根据当前位置的水管形状以及上一位置水管的方向来判断下一位置的方向, 时间复杂度$O(m)$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">1e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> m, s, t;</span><br><span class="line"><span class="type">char</span> G[<span class="number">2</span>][MAXN];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">3</span>][MAXN];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0 向下</span></span><br><span class="line"><span class="comment">1 向上</span></span><br><span class="line"><span class="comment">2 向左</span></span><br><span class="line"><span class="comment">3 向右</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">bool</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[x][y]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span> || x &gt;= <span class="number">2</span> || y &lt; <span class="number">0</span> || y &gt;= m) &#123;</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">2</span> &amp;&amp; y == t) &#123;</span><br><span class="line">            res = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(type == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[x][y] == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>, y, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(y &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x, y - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[x][y] == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(y &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x, y - <span class="number">1</span>, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x - <span class="number">1</span>, y, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>, y, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[x][y] == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x - <span class="number">1</span>, y, <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(x + <span class="number">1</span>, y, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[x][y] == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x - <span class="number">1</span>, y, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(y &gt;= <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">dfs</span>(x, y - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    vis[x][y] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; s &gt;&gt; t;</span><br><span class="line">    s --, t --;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line">            cin &gt;&gt; G[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>, s, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(res) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> _ = <span class="number">1</span>;</span><br><span class="line">    cin &gt;&gt; _;</span><br><span class="line">    <span class="keyword">while</span>(_ --) &#123;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="I-Oshwiciqwq-的电梯"><a href="#I-Oshwiciqwq-的电梯" class="headerlink" title="I Oshwiciqwq 的电梯"></a>I Oshwiciqwq 的电梯</h3><p>大模拟，由于数据范围非常的小，可以确定每一秒的状态。</p>
<p>代码写得又臭又长，好在写了注释，应该可以看懂。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line">PII t[<span class="number">3</span>][<span class="number">10</span>][<span class="number">10</span>];   <span class="comment">// 0  X, 1  Y ,2  Z; first 位置， second 编号</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">510</span>];         <span class="comment">// 0 未上电梯，1在x电梯上，2在y电梯上，3在z电梯上</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">P</span> &#123;</span><br><span class="line">    <span class="type">int</span> tim;        <span class="comment">// 出现时间</span></span><br><span class="line">    <span class="type">int</span> x, y, z;    <span class="comment">// 当前位置</span></span><br><span class="line">    <span class="type">int</span> tx, ty, tz; <span class="comment">// 目标位置</span></span><br><span class="line">&#125; p[<span class="number">60</span>]; </span><br><span class="line"><span class="type">int</span> n, m, h, q, k;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= h; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t[<span class="number">0</span>][i][j].first &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                t[<span class="number">0</span>][i][j].first %= n;</span><br><span class="line">                t[<span class="number">0</span>][i][j].first ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= h; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t[<span class="number">1</span>][i][j].first &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                t[<span class="number">1</span>][i][j].first %= m;</span><br><span class="line">                t[<span class="number">1</span>][i][j].first ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t[<span class="number">2</span>][i][j].first &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                t[<span class="number">2</span>][i][j].first %= h;</span><br><span class="line">                t[<span class="number">2</span>][i][j].first ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">RES</span> &#123;</span><br><span class="line">    <span class="type">int</span> tt;</span><br><span class="line">    <span class="type">int</span> p;</span><br><span class="line">    <span class="type">int</span> io;</span><br><span class="line">    <span class="type">int</span> xl;</span><br><span class="line">    <span class="type">int</span> x, y, z;</span><br><span class="line">    <span class="type">const</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> RES&amp; a) <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(tt != a.tt) <span class="keyword">return</span> tt &lt; a.tt;</span><br><span class="line">        <span class="keyword">if</span>(xl != a.xl) <span class="keyword">return</span> xl &lt; a.xl;</span><br><span class="line">        <span class="keyword">if</span>(io != a.io) <span class="keyword">return</span> io &lt; a.io;</span><br><span class="line">        <span class="keyword">if</span>(p != a.p) <span class="keyword">return</span> p &lt; a.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;RES&gt; res;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; h &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> type, ex, ey, ez;</span><br><span class="line">        cin &gt;&gt; type &gt;&gt; ex &gt;&gt; ey &gt;&gt; ez;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="number">0</span>) &#123;</span><br><span class="line">            t[type][ey][ez].first = ex;</span><br><span class="line">            t[type][ey][ez].second = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(type == <span class="number">1</span>) &#123;</span><br><span class="line">            t[type][ex][ez].first = ey;</span><br><span class="line">            t[type][ex][ez].second = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t[type][ex][ey].first = ez;</span><br><span class="line">            t[type][ex][ey].second = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i ++) &#123;</span><br><span class="line">        <span class="keyword">auto</span> &amp;[tim, x, y, z, tx, ty, tz] = p[i];</span><br><span class="line">        cin &gt;&gt; tim &gt;&gt; x &gt;&gt; y &gt;&gt; z &gt;&gt; tx &gt;&gt; ty &gt;&gt; tz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> tt = <span class="number">0</span>; <span class="comment">// 当前时间戳</span></span><br><span class="line">    <span class="type">bool</span> ok = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ok = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; q; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(p[i].tim &lt;= tt) &#123;</span><br><span class="line">                <span class="comment">// 未进电梯</span></span><br><span class="line">                <span class="keyword">if</span>(v[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(p[i].x != p[i].tx) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(t[<span class="number">0</span>][p[i].y][p[i].z].first == p[i].x) &#123;</span><br><span class="line">                            res.<span class="built_in">push_back</span>(&#123;tt, i + <span class="number">1</span>, <span class="number">1</span> , t[<span class="number">0</span>][p[i].y][p[i].z].second + <span class="number">1</span>, p[i].x, p[i].y, p[i].z&#125;);</span><br><span class="line">                            v[i] = <span class="number">1</span>;</span><br><span class="line">                            p[i].x %= n;</span><br><span class="line">                            p[i].x ++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p[i].y != p[i].ty) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(t[<span class="number">1</span>][p[i].x][p[i].z].first == p[i].y) &#123;</span><br><span class="line">                            res.<span class="built_in">push_back</span>(&#123;tt, i + <span class="number">1</span>, <span class="number">1</span> , t[<span class="number">1</span>][p[i].x][p[i].z].second + <span class="number">1</span>, p[i].x, p[i].y, p[i].z&#125;);</span><br><span class="line">                            v[i] = <span class="number">2</span>;</span><br><span class="line">                            p[i].y %= m;</span><br><span class="line">                            p[i].y ++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p[i].z != p[i].tz) &#123;</span><br><span class="line">                        ok = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span>(t[<span class="number">2</span>][p[i].x][p[i].y].first == p[i].z) &#123;</span><br><span class="line">                            res.<span class="built_in">push_back</span>(&#123;tt, i + <span class="number">1</span>, <span class="number">1</span> , t[<span class="number">2</span>][p[i].x][p[i].y].second + <span class="number">1</span>, p[i].x, p[i].y, p[i].z&#125;);</span><br><span class="line">                            v[i] = <span class="number">3</span>;</span><br><span class="line">                            p[i].z %= h;</span><br><span class="line">                            p[i].z ++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                    ok = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(p[i].x == p[i].tx) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;tt, i + <span class="number">1</span>, <span class="number">0</span>, t[<span class="number">0</span>][p[i].y][p[i].z].second + <span class="number">1</span>, p[i].x, p[i].y, p[i].z&#125;);</span><br><span class="line">                        v[i] = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p[i].x %= n;</span><br><span class="line">                        p[i].x ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v[i] == <span class="number">2</span>) &#123;</span><br><span class="line">                    ok = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(p[i].y == p[i].ty) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;tt, i + <span class="number">1</span>, <span class="number">0</span>, t[<span class="number">1</span>][p[i].x][p[i].z].second + <span class="number">1</span>, p[i].x, p[i].y, p[i].z&#125;);</span><br><span class="line">                        v[i] = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p[i].y %= m;</span><br><span class="line">                        p[i].y ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v[i] == <span class="number">3</span>) &#123;</span><br><span class="line">                    ok = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">if</span>(p[i].z == p[i].tz) &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(&#123;tt, i + <span class="number">1</span>, <span class="number">0</span>, t[<span class="number">2</span>][p[i].x][p[i].y].second + <span class="number">1</span>, p[i].x, p[i].y, p[i].z&#125;);</span><br><span class="line">                        v[i] = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        p[i].z %= h;</span><br><span class="line">                        p[i].z ++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ok = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">work</span>();</span><br><span class="line">        tt ++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (ok);</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i : res) &#123;</span><br><span class="line">        <span class="comment">// [time] Person person_id IN / OUT Elevator elevator_id at (x, y, z);</span></span><br><span class="line">        <span class="keyword">if</span>(i.io == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; i.tt &lt;&lt; <span class="string">&quot;s] Person &quot;</span> &lt;&lt; i.p &lt;&lt; <span class="string">&quot; IN Elevator &quot;</span> &lt;&lt; i.xl &lt;&lt; <span class="string">&quot; at (&quot;</span> &lt;&lt; i.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; i.y &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; i.z &lt;&lt; <span class="string">&quot;)\n&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;[&quot;</span> &lt;&lt; i.tt &lt;&lt; <span class="string">&quot;s] Person &quot;</span> &lt;&lt; i.p &lt;&lt; <span class="string">&quot; OUT Elevator &quot;</span> &lt;&lt; i.xl &lt;&lt; <span class="string">&quot; at (&quot;</span> &lt;&lt; i.x &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; i.y &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; i.z &lt;&lt; <span class="string">&quot;)\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Splay</title>
    <url>/2022/11/28/Splay/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> root, tot;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">ND</span> &#123;</span><br><span class="line">    <span class="type">int</span> ch[<span class="number">2</span>],  <span class="comment">// 儿子</span></span><br><span class="line">        f,      <span class="comment">// 父亲</span></span><br><span class="line">        siz,    <span class="comment">// 子树大小</span></span><br><span class="line">        val,    <span class="comment">// 值</span></span><br><span class="line">        cnt;    <span class="comment">// 个数</span></span><br><span class="line">&#125; nd[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    nd[x].siz = nd[nd[x].ch[<span class="number">0</span>]].siz + nd[nd[x].ch[<span class="number">1</span>]].siz + nd[x].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> y = nd[x].f;</span><br><span class="line">    <span class="type">int</span> z = nd[y].f;</span><br><span class="line">    <span class="type">int</span> k = nd[y].ch[<span class="number">1</span>] == x;</span><br><span class="line">    nd[z].ch[nd[z].ch[<span class="number">1</span>] == y] = x;</span><br><span class="line">    nd[x].f = z;</span><br><span class="line">    nd[y].ch[k] = nd[x].ch[k ^ <span class="number">1</span>];</span><br><span class="line">    nd[nd[x].ch[k ^ <span class="number">1</span>]].f = y;</span><br><span class="line">    nd[x].ch[k ^ <span class="number">1</span>] = y;</span><br><span class="line">    nd[y].f = x;</span><br><span class="line">    <span class="built_in">update</span>(y), <span class="built_in">update</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> goal)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(nd[x].f != goal) &#123;</span><br><span class="line">        <span class="type">int</span> y = nd[x].f;</span><br><span class="line">        <span class="type">int</span> z = nd[y].f;</span><br><span class="line">        <span class="keyword">if</span>(z != goal) &#123;</span><br><span class="line">            (nd[z].ch[<span class="number">1</span>] == y) == (nd[y].ch[<span class="number">1</span>] == x) ?</span><br><span class="line">                <span class="built_in">rotate</span>(y) : <span class="built_in">rotate</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rotate</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(goal == <span class="number">0</span>) &#123;</span><br><span class="line">        root = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">if</span>(!u) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(nd[u].ch[x &gt; nd[u].val] &amp;&amp; x != nd[u].val) &#123;</span><br><span class="line">        u = nd[u].ch[x &gt; nd[u].val];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root, f = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(u &amp;&amp; nd[u].val != x) &#123;</span><br><span class="line">        f = u;</span><br><span class="line">        u = nd[u].ch[x &gt; nd[u].val];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(u) &#123;</span><br><span class="line">        nd[u].cnt ++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        u = ++ tot;</span><br><span class="line">        <span class="keyword">if</span>(f) &#123;</span><br><span class="line">            nd[f].ch[x &gt; nd[f].val] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        nd[u].ch[<span class="number">0</span>] = nd[u].ch[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        nd[u].f = f;</span><br><span class="line">        nd[u].val = x;</span><br><span class="line">        nd[u].cnt = <span class="number">1</span>;</span><br><span class="line">        nd[u].siz = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Next</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">if</span>(nd[u].val &gt; x) <span class="keyword">return</span> u;</span><br><span class="line">    u = nd[u].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(nd[u].ch[<span class="number">0</span>]) u = nd[u].ch[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pre</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">find</span>(x);</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">if</span>(nd[u].val &lt; x) <span class="keyword">return</span> u;</span><br><span class="line">    u = nd[u].ch[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(nd[u].ch[<span class="number">1</span>]) u = nd[u].ch[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> pre = <span class="built_in">Pre</span>(x), next = <span class="built_in">Next</span>(x);</span><br><span class="line">    <span class="built_in">splay</span>(pre, <span class="number">0</span>), <span class="built_in">splay</span>(next, pre);</span><br><span class="line">    <span class="type">int</span> del = nd[next].ch[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span>(nd[del].cnt &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        nd[del].cnt --;</span><br><span class="line">        <span class="built_in">splay</span>(del, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nd[next].ch[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> u = root;</span><br><span class="line">    <span class="keyword">if</span>(nd[u].siz &lt; k) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> y = nd[u].ch[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span>(k &gt; nd[y].siz + nd[u].cnt) &#123;</span><br><span class="line">            k -= nd[y].siz + nd[u].cnt;</span><br><span class="line">            u = nd[u].ch[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(k &lt;= nd[y].siz) &#123;</span><br><span class="line">                u = y;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> nd[u].val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>), cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    cin &gt;&gt; q;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">1e9</span>), <span class="built_in">insert</span>(<span class="number">-1e9</span>);</span><br><span class="line">    <span class="keyword">while</span>(q --) &#123;</span><br><span class="line">        <span class="type">int</span> op, x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">switch</span> (op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">insert</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">del</span>(x);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">find</span>(x);</span><br><span class="line">                cout &lt;&lt; nd[nd[root].ch[<span class="number">0</span>]].siz &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                cout &lt;&lt; <span class="built_in">kth</span>(x + <span class="number">1</span>) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                cout &lt;&lt; nd[<span class="built_in">Pre</span>(x)].val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                cout &lt;&lt; nd[<span class="built_in">Next</span>(x)].val &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>数据结构</category>
        <category>算法笔记</category>
      </categories>
      <tags>
        <tag>Splay</tag>
      </tags>
  </entry>
  <entry>
    <title>rust小记</title>
    <url>/2022/11/22/rust%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li>Linux<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.3 https://sh.rustup.rs -sSf | sh</span></span><br></pre></td></tr></table></figure></li>
<li>windows<br>前往 <a href="https://www.rust-lang.org/install.html">https://www.rust-lang.org/install.html</a> 并按照说明安装 Rust</li>
</ul>
<h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustc --version</span></span><br></pre></td></tr></table></figure>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustup update</span></span><br></pre></td></tr></table></figure>
<h3 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rustup self uninstall</span></span><br></pre></td></tr></table></figure>
<h3 id="本地文档"><a href="#本地文档" class="headerlink" title="本地文档"></a>本地文档</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rustup doc</span><br></pre></td></tr></table></figure>
<h2 id="编译命令与Cargo"><a href="#编译命令与Cargo" class="headerlink" title="编译命令与Cargo"></a>编译命令与Cargo</h2><h3 id="rustc"><a href="#rustc" class="headerlink" title="rustc"></a>rustc</h3><p>和gcc差不多的用法<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">rust [-g] &#123;filename.rs&#125; [-o]</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h3><ul>
<li>创建一个项目<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cargo new &#123;<span class="built_in">dirname</span>&#125;</span> </span><br></pre></td></tr></table></figure></li>
<li>构建<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cargo build [--release]</span></span><br></pre></td></tr></table></figure>
只确保通过编译<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cargo check</span><br></pre></td></tr></table></figure></li>
<li>运行<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cargo run</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>rust中变量默认设置为不可变, 只能被覆盖, 需要加<code>mut</code>前缀设置为可变.<br><code>const</code>修饰常量, 常量可以是个算式</p>
<h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><div class="table-container">
<table>
<thead>
<tr>
<th>长度</th>
<th>有符号</th>
<th>无符号</th>
</tr>
</thead>
<tbody>
<tr>
<td>8-bit</td>
<td><code>i8</code></td>
<td><code>u8</code></td>
</tr>
<tr>
<td>16-bit</td>
<td><code>i16</code></td>
<td><code>u16</code></td>
</tr>
<tr>
<td>32-bit</td>
<td><code>i32</code></td>
<td><code>u32</code></td>
</tr>
<tr>
<td>64-bit</td>
<td><code>i64</code></td>
<td><code>u64</code></td>
</tr>
<tr>
<td>128-bit</td>
<td><code>i128</code></td>
<td><code>u128</code></td>
</tr>
<tr>
<td>arch</td>
<td><code>isize</code></td>
<td><code>usize</code></td>
</tr>
</tbody>
</table>
</div>
<p>向$0$取整</p>
<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p><code>f32</code>, <code>f64</code></p>
<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p><code>bool</code>: <code>enum &#123; true, false &#125;</code></p>
<h3 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h3><p>UTF-8编码(2-bit)<br><code>char</code></p>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p><code>(i32, i32, i32)</code><br><code>.</code>访问</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p><code>[i32; 10]</code> $10$个<code>i32</code>变量</p>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">IpAddr</span>&#123;</span><br><span class="line">    V4: (<span class="type">u8</span>, <span class="type">u8</span>, <span class="type">u8</span>, <span class="type">u8</span>),</span><br><span class="line">    V6: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>枚举类型中的值是可选项，用<code>::</code>来构造一个实例<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">home</span> = IpAddr::<span class="title function_ invoke__">V4</span>(<span class="number">192</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure></p>
<ul>
<li>特殊的枚举类型<code>Option</code><br>这是一个定义在标准库内的类型<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>无返回值 (void) 的函数<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">function</span>() &#123;</span><br><span class="line">    <span class="comment">// -- skip -- </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>带返回值的函数<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">function</span>() <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="comment">// 两中返回值的方式都是可以的</span></span><br><span class="line">    <span class="number">5</span></span><br><span class="line">    <span class="comment">//return 5;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>兼容 C 风格, 可以带<code>()</code><br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">5</span> &#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> x &lt; <span class="number">10</span> &#123;</span><br><span class="line">    x += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><p>无限循环体<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">100</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p>兼容 C 风格, 可以带<code>()</code><br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> x &lt; <span class="number">5</span> &#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>遍历集合<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> a &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>逆序遍历索引<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">5</span>).<span class="title function_ invoke__">rev</span>() &#123;</span><br><span class="line">    <span class="comment">// --skip--</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>类似 C 语言中的switch<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">IpAddr</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">V4</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">V6</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">home</span> = IpAddr::<span class="title function_ invoke__">V4</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;192, 0, 0, 1&quot;</span>));</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ip</span> = <span class="keyword">match</span> home &#123;</span><br><span class="line">    IpAddr::<span class="title function_ invoke__">V4</span>(s) =&gt; &#123;</span><br><span class="line">        s</span><br><span class="line">    &#125;,</span><br><span class="line">    IpAddr::<span class="title function_ invoke__">V6</span>(s) =&gt; s</span><br><span class="line">    <span class="comment">// =&gt; 表示产生的效果</span></span><br><span class="line"></span><br><span class="line">    other =&gt; <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;0, 0, 0, 0&quot;</span>),</span><br><span class="line">    <span class="comment">//match 是穷尽的 </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="if-let"><a href="#if-let" class="headerlink" title="if let"></a>if let</h3><p>弱化版的match<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">IpAddr</span>::<span class="title function_ invoke__">V4</span>(s) = home&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cnt += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, cnt);</span><br></pre></td></tr></table></figure></p>
<h2 id="结构体定义与实例"><a href="#结构体定义与实例" class="headerlink" title="结构体定义与实例"></a>结构体定义与实例</h2><p>贴个自己写的 BIT 基本就会用了<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span>  <span class="title function_">main</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">bit</span> = BIT::<span class="title function_ invoke__">new</span>(<span class="number">200</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">1</span>..bit.N) &#123;</span><br><span class="line">        bit.<span class="title function_ invoke__">add</span>(i, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">1</span>..bit.N) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, bit.<span class="title function_ invoke__">sum</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">    N: <span class="type">i32</span>,</span><br><span class="line">    s: [<span class="type">i32</span>; <span class="number">1000</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">BIT</span> &#123;</span><br><span class="line">  <span class="comment">// 类似构造方法</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">bit</span>  =  <span class="keyword">Self</span> &#123;</span><br><span class="line">            N: n,</span><br><span class="line">            s: [<span class="number">0</span>; <span class="number">1000</span>],</span><br><span class="line">        &#125;;</span><br><span class="line">        bit</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, x: <span class="type">i32</span>, y: <span class="type">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = x;</span><br><span class="line">        <span class="keyword">while</span> i &lt; <span class="keyword">self</span>.N &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">inx</span>: <span class="type">usize</span> = i.<span class="title function_ invoke__">try_into</span>().<span class="title function_ invoke__">unwrap</span>(); <span class="comment">// 索引要转化成 usize</span></span><br><span class="line">            <span class="keyword">self</span>.s[inx] += y;</span><br><span class="line">            i += i &amp; - i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">sum</span>(&amp;<span class="keyword">self</span>, x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">res</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = x;</span><br><span class="line">        <span class="keyword">while</span> i &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">inx</span>: <span class="type">usize</span> = i.<span class="title function_ invoke__">try_into</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            res += <span class="keyword">self</span>.s[inx];</span><br><span class="line">            i -= i &amp; - i;</span><br><span class="line">        &#125;</span><br><span class="line">        res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="几种常见的封装集合"><a href="#几种常见的封装集合" class="headerlink" title="几种常见的封装集合"></a>几种常见的封装集合</h2><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>定义<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">v2</span> = <span class="built_in">vec!</span>[<span class="number">0</span>; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span>  <span class="keyword">mut </span><span class="variable">v3</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br></pre></td></tr></table></figure><br>几个常用的函数</p>
<ul>
<li>push</li>
<li>pop</li>
<li>append<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 v2 中的元素移动到 v1</span></span><br><span class="line">v1.<span class="title function_ invoke__">append</span>(&amp;<span class="keyword">mut</span> v2);</span><br></pre></td></tr></table></figure></li>
<li>sort | sort_by<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 逆序排序</span></span><br><span class="line">v1.<span class="title function_ invoke__">sort_by</span>(|a, b| b.<span class="title function_ invoke__">cmp</span>(a));</span><br></pre></td></tr></table></figure></li>
<li>is_empty</li>
<li>len</li>
<li>resize</li>
</ul>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>定义<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello, &quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s2</span> = <span class="string">&quot;world!&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s3</span> = s1 + &amp;s2;</span><br></pre></td></tr></table></figure><br>采用 UTF-8 编码，利用索引引用的时候两个连续的索引表示一位<code>char</code>。</p>
<h3 id="Hash-Map"><a href="#Hash-Map" class="headerlink" title="Hash Map"></a>Hash Map</h3><p>定义<br><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">map.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;red&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">1</span>);</span><br><span class="line">map.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;blue&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">2</span>);</span><br><span class="line">map.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;red&quot;</span>.<span class="title function_ invoke__">to_string</span>(), <span class="number">10</span>);  <span class="comment">// 覆盖</span></span><br><span class="line">map.<span class="title function_ invoke__">entry</span>(<span class="string">&quot;red&quot;</span>.<span class="title function_ invoke__">to_string</span>()).<span class="title function_ invoke__">or_insert</span>(<span class="number">10</span>); <span class="comment">// 不存在则插入一个值</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">conut</span> = map.<span class="title function_ invoke__">entry</span>(<span class="string">&quot;bule&quot;</span>.<span class="title function_ invoke__">to_string</span>()).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>);</span><br><span class="line">*conut += <span class="number">1</span>; <span class="comment">// 更新map中的数据</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = map.<span class="title function_ invoke__">get</span>(&amp;<span class="string">&quot;red&quot;</span>.<span class="title function_ invoke__">to_string</span>()).<span class="title function_ invoke__">copied</span>().<span class="title function_ invoke__">unwrap_or</span>(<span class="number">0</span>); <span class="comment">// 得到一个不可变的值</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>分块简述</title>
    <url>/2022/10/11/%E5%88%86%E5%9D%97%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="数组分块简述"><a href="#数组分块简述" class="headerlink" title="数组分块简述"></a>数组分块简述</h3><p>在某些情况下，我们可能需要暴力地处理数组的每一个数，数组分块提供了一种简单的优化来降低复杂度，使得原本的$O(n)$降为$O(\sqrt n)$，这可能不是最优解，但一定足够简单（事实上，在1e5范围内，$O(\log^2 n)$和$O(\sqrt n)$差距不大）。<br><strong>这类问题的“整体”性质更弱，有时不存在高效的信息合并化简方法，需要在“批量”和“零散”之间找到平衡点。</strong></p>
<ul>
<li>基础形式</li>
</ul>
<p>我们将一个数组分为形如下图的几段，每段大小为B，当然为了规范，如果$B \nmid n$，我们要在数组后面填充$inf$（在后面的一些处理中会用到这个）。对每次操作只需要对左右两个散块单独处理和对中间一些整块处理。<br><img src="https://s1.328888.xyz/2022/10/10/gfTOw.png" alt="图1"></p>
<p>理解了分块的概念以后，你就可以开始着手尝试用分块去解决一些线段树问题了（虽然此时分块对比线段树不占优）。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h5 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a><a href="https://www.luogu.com.cn/problem/P3372">模板题</a></h5><p>题目大意：区间上所有元素加一个数$k$；求区间所有元素的和。<br>对于这个问题，简单地开三个数组$a,s,v$ 分别表示：数组值；分块中除去标记的数组值和；标记：分块中的每个元素 + k。</p>
<p>参考代码：<br>每个块的左右边界可以用结构体记录下来，也可以直接计算，这里采用的是直接计算的方式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">1e5</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> BS;</span><br><span class="line">ll a[MAXN], s[<span class="number">405</span>], v[<span class="number">405</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> bl = l / BS, br = r / BS;</span><br><span class="line">    <span class="keyword">if</span>(bl == br) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) &#123;</span><br><span class="line">            a[i] += k, s[bl] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt; (bl + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            a[i] += k, s[bl] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = bl + <span class="number">1</span>; i &lt; br; i ++) &#123;</span><br><span class="line">            v[i] += k, s[i] += <span class="number">1ll</span> * BS * k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = br * BS; i &lt;= r; i ++) &#123;</span><br><span class="line">            a[i] += k, s[br] += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> bl = l / BS, br = r / BS;</span><br><span class="line">    <span class="keyword">if</span>(bl == br) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) &#123;</span><br><span class="line">            res += a[i] + v[bl];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt; (bl + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            res += a[i] + v[bl];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = bl + <span class="number">1</span>; i &lt; br; i ++) &#123;</span><br><span class="line">            res += s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = br * BS; i &lt;= r; i ++) &#123;</span><br><span class="line">            res += a[i] + v[br];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    BS = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s[i / BS]  += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m -- ) &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r, k;</span><br><span class="line">        cin &gt;&gt; op  &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l --, r --;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="built_in">add</span>(l, r, k);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(l, r) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分块的大小可以人为确定，需要计算时间复杂度后再确定。此题中理论时间复杂度为$O(q (B + n / B))$， 另$B = \sqrt n$，得到最优时间复杂度$O(q \sqrt n)$。</p>
<h5 id="教主的魔法"><a href="#教主的魔法" class="headerlink" title="教主的魔法"></a><a href="https://www.luogu.com.cn/problem/P2801">教主的魔法</a></h5><p>题目大意：1、区间加；2、求区间大于$c$的元素个数。</p>
<p>首先来思考一下如何找出一个整块中大于$c$的元素个数<br>……<br>如果一个整块中的元素有序，那么是不是可以二分。</p>
<p>在上题中我们用$s$来维护区间和，现在我们用$s$来维护区间的有序数组。那么一个区间内大于$c$的元素个数就等于散块大于$c$的个数 + 每个整块中大于$c$的个数（这部分用lower_bound来处理）。单次询问时间复杂度为$O((n/B) log B + B)$。</p>
<p>在来思考一下区间加，由于需要额外维护一个有序数组，每次加操作可以对散块进行暴力排序，整块就在标记上加值，单词加的时间复杂度为$O(B log B + n / B)$。</p>
<blockquote>
<p>关于B的取值问题，首先应该考虑平衡两种操作的时间复杂度，其次应该考虑整块的时间复杂度和散块部分的时间复杂度，具体而言就是让两者相等求出B。比如此题中对散块重新排序可以优化成提取有序的两部分（有改动和无改动）再merge，此时加操作的时间复杂度就降为$O(B + n / B)$，发现这个复杂度是恒小于询问操作的复杂度的，此时就应该考虑适当增大B的大小，可以对$(n / B) log B + B$ 求导计算出极值，也可以用三分来求，事实上这个值约等于$\sqrt{n\log \sqrt n}$。</p>
</blockquote>
<p>参考代码（不加优化）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">1100000</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n, q, BS;</span><br><span class="line"><span class="type">int</span> a[MAXN], v[<span class="number">410</span>], s[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> bl = l / BS, br = r / BS;</span><br><span class="line">    <span class="keyword">if</span>(bl == br) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) &#123;</span><br><span class="line">            a[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = bl * BS; i &lt; (bl + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            s[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s + bl * BS, s + (bl + <span class="number">1</span>) * BS);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt; (bl + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            a[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = bl * BS; i &lt; (bl + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            s[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s + bl * BS, s + (bl + <span class="number">1</span>) * BS);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = bl + <span class="number">1</span>; i &lt; br; i ++) &#123;</span><br><span class="line">            v[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = br * BS; i &lt;= r; i ++) &#123;</span><br><span class="line">            a[i] += k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = br * BS; i &lt; (br + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            s[i] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s + br * BS, s + (br + <span class="number">1</span>) * BS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> bl = l / BS, br = r / BS;</span><br><span class="line">    <span class="type">int</span> C, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bl == br) &#123;</span><br><span class="line">        C = c - v[bl];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt;= C) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        C = c - v[bl];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt; (bl + <span class="number">1</span>) * BS; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt;= C) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = bl + <span class="number">1</span>; i &lt; br; i ++) &#123;</span><br><span class="line">            C = c - v[i];</span><br><span class="line">            res += BS - (<span class="built_in">lower_bound</span>(s + BS * i, s + BS * (i + <span class="number">1</span>), C) - (s + BS * i));</span><br><span class="line">        &#125;</span><br><span class="line">        C = c - v[br];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = br * BS; i &lt;= r; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &gt;= C) res ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    BS = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        s[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i * BS &lt;= n ; i ++) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(s + i * BS, s + (i + <span class="number">1</span>) * BS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(q --) &#123;</span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line">        <span class="type">int</span> l, r, x;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; l &gt;&gt; r &gt;&gt; x;</span><br><span class="line">        l --, r --;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="string">&#x27;M&#x27;</span>) <span class="built_in">add</span>(l, r, x);</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; <span class="built_in">query</span>(l, r, x) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>稍稍写一下归并的代码（给一个结构体写的板子）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m, BS;</span><br><span class="line">ll a[MAXN];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BLOCK</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    ll ex;</span><br><span class="line">    vector&lt;ll&gt; B;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="built_in">BLOCK</span>(<span class="type">int</span> s) &#123;</span><br><span class="line">        B.<span class="built_in">resize</span>(s);</span><br><span class="line">        ex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BLOCK</span>(<span class="type">int</span> _l, <span class="type">int</span> _r) &#123;</span><br><span class="line">        ex = <span class="number">0</span>;</span><br><span class="line">        l = _l, r = _r;</span><br><span class="line">        <span class="type">int</span> s = r - l + <span class="number">1</span>;</span><br><span class="line">        B.<span class="built_in">resize</span>(s);</span><br><span class="line">        mp.<span class="built_in">resize</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; i ++) &#123;</span><br><span class="line">            mp[i - l] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(mp.<span class="built_in">begin</span>(), mp.<span class="built_in">end</span>(), [&amp;] (<span class="type">int</span> x, <span class="type">int</span> y)  &#123;</span><br><span class="line">            <span class="keyword">return</span> a[x] &lt; a[y];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i ++) &#123;</span><br><span class="line">            B[i] = a[mp[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; _1, _2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mp.<span class="built_in">size</span>(); i ++) &#123;</span><br><span class="line">            <span class="type">int</span> x = mp[i];</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= s &amp;&amp; x &lt;= t) &#123;</span><br><span class="line">                _1.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                _2.<span class="built_in">push_back</span>(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : _1) a[i] += k;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; _1.<span class="built_in">size</span>() &amp;&amp; j &lt; _2.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[_1[i]] &lt; a[_2[j]]) mp[c ++] = _1[i ++];</span><br><span class="line">            <span class="keyword">else</span> mp[c ++] = _2[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; _1.<span class="built_in">size</span>()) mp[c ++] = _1[i ++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt; _2.<span class="built_in">size</span>()) mp[c ++] = _2[j ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mp.<span class="built_in">size</span>(); i ++) B[i] = a[mp[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;BLOCK&gt; block;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lb = l / BS, rb = r / BS;</span><br><span class="line">    <span class="keyword">if</span>(lb == rb) &#123;</span><br><span class="line">        block[lb].<span class="built_in">rebuild</span>(l, r, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        block[lb].<span class="built_in">rebuild</span>(l, block[lb].r, k);</span><br><span class="line">        block[rb].<span class="built_in">rebuild</span>(block[rb].l, r, k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = lb + <span class="number">1</span>; i &lt; rb; i ++) &#123;</span><br><span class="line">            block[i].ex += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="由乃打扑克"><a href="#由乃打扑克" class="headerlink" title="由乃打扑克"></a><a href="https://www.luogu.com.cn/problem/P5356">由乃打扑克</a></h5><blockquote>
<p>给你一个长为 $n$ 的序列 $a$，需要支持 $m$ 次操作，操作有两种：<br>1、查询区间 $[l,r]$ 的第 $k$ 小值。<br>2、区间 $[l,r]$ 加上 $k$。</p>
</blockquote>
<p>分块 + 整体二分</p>
<p>第$k$小的值$x$就相当于区间内存在$k-1$个数小于等于$x$，并且求这个值符合二分的规则，故可以整体二分确定$x$的大小，具体的check方法与上一例题一模一样。</p>
<p>几个优化：<br><strong>1.</strong> 二分前将左右两块散块合并，这样可以用$O(log\ B)$来代替对整个散块遍历的$O(B)$<br><strong>2.</strong> 二分前计算出二分的上下界，以减少二分次数。<br>复杂度分析：<br>add 时间复杂度$O(B + n / B）$<br>query 时间复杂度$O(B + (n / B)log\ B\ log\ w)$<br>（$log\ w$ 是二分是次数，大概为$20-30$）。</p>
<p>确定块长：理论上复杂度的计算应该是查询时间复杂度<br>对$B$求偏导得到的，但是按照理论来算的话，这题这么做是可以被卡掉的。于是需要调亿点点块长，下面这份代码块长取$912$可以拿到$82pts$（已经不想扣常数了）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">1e5</span> + <span class="number">9</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="keyword">typename</span>... Ts&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;arg,Ts&amp;... args)</span> </span>&#123;</span><br><span class="line">    T x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(c))&#123;<span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(c))&#123;x = (x &lt;&lt; <span class="number">3</span>) +(x &lt;&lt; <span class="number">1</span>) + (c - <span class="string">&#x27;0&#x27;</span>);c = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    arg = x * f;</span><br><span class="line">    <span class="built_in">read</span>(args...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, BS;</span><br><span class="line">ll a[MAXN];</span><br><span class="line"><span class="type">int</span> _1[MAXN], _2[MAXN], t1, t2;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">BLOCK</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    ll ex;</span><br><span class="line">    vector&lt;ll&gt; B;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mp;</span><br><span class="line">    <span class="built_in">BLOCK</span>(<span class="type">int</span> s) &#123;</span><br><span class="line">        B.<span class="built_in">resize</span>(s);</span><br><span class="line">        ex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">BLOCK</span>(<span class="type">int</span> _l, <span class="type">int</span> _r) &#123;</span><br><span class="line">        ex = <span class="number">0</span>;</span><br><span class="line">        l = _l, r = _r;</span><br><span class="line">        <span class="type">int</span> s = r - l + <span class="number">1</span>;</span><br><span class="line">        B.<span class="built_in">resize</span>(s);</span><br><span class="line">        mp.<span class="built_in">resize</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = l; i &lt;= r; ++ i) &#123;</span><br><span class="line">            mp[i - l] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(mp.<span class="built_in">begin</span>(), mp.<span class="built_in">end</span>(), [&amp;] (<span class="type">int</span> x, <span class="type">int</span> y)  &#123;</span><br><span class="line">            <span class="keyword">return</span> a[x] &lt; a[y];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; s; i ++) &#123;</span><br><span class="line">            B[i] = a[mp[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> s, <span class="type">int</span> t, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        t1 = t2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mp.<span class="built_in">size</span>(); ++ i) &#123;</span><br><span class="line">            <span class="type">int</span> x = mp[i];</span><br><span class="line">            <span class="keyword">if</span>(x &gt;= s &amp;&amp; x &lt;= t) _1[t1 ++] = x;</span><br><span class="line">            <span class="keyword">else</span> _2[t2 ++] = x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; t1; ++ i) a[_1[i]] += k;</span><br><span class="line">        <span class="type">int</span>  i = <span class="number">0</span>, j = <span class="number">0</span>, c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; t1 &amp;&amp; j &lt; t2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[_1[i]] &lt; a[_2[j]]) mp[c ++] = _1[i ++];</span><br><span class="line">            <span class="keyword">else</span> mp[c ++] = _2[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; t1) mp[c ++] = _1[i ++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt; t2) mp[c ++] = _2[j ++];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; mp.<span class="built_in">size</span>(); i ++) B[i] = a[mp[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;BLOCK&gt; block;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lb = l / BS, rb = r / BS;</span><br><span class="line">    <span class="keyword">if</span>(lb == rb) &#123;</span><br><span class="line">        block[lb].<span class="built_in">rebuild</span>(l, r, k);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        block[lb].<span class="built_in">rebuild</span>(l, block[lb].r, k);</span><br><span class="line">        block[rb].<span class="built_in">rebuild</span>(block[rb].l, r, k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = lb + <span class="number">1</span>; i &lt; rb; i ++) &#123;</span><br><span class="line">            block[i].ex += k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> lb = l / BS, rb = r / BS;</span><br><span class="line">    <span class="keyword">if</span>(lb == rb) &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : block[lb].mp) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= l &amp;&amp; i &lt;= r) c ++;</span><br><span class="line">            <span class="keyword">if</span>(c == k) <span class="keyword">return</span> a[i] + block[lb].ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        BLOCK _ex(block[lb].r - l + <span class="number">1</span> + r - block[rb].l + <span class="number">1</span>);</span><br><span class="line">        t1 = t2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : block[lb].mp) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= l) _1[t1 ++] = a[i] + block[lb].ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : block[rb].mp) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= r) _2[t2 ++] = a[i] + block[rb].ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; t1 &amp;&amp; j &lt; t2) &#123;</span><br><span class="line">            <span class="keyword">if</span>(_1[i] &lt; _2[j]) _ex.B[c ++] = _1[i ++];</span><br><span class="line">            <span class="keyword">else</span> _ex.B[c ++] = _2[j ++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; t1) _ex.B[c ++] = _1[i ++];</span><br><span class="line">        <span class="keyword">while</span>(j &lt; t2) _ex.B[c ++] = _2[j ++];</span><br><span class="line">        ll L = <span class="number">1e18</span>, R = <span class="number">-1e18</span>;</span><br><span class="line">        L = <span class="built_in">min</span>(L, _ex.B[<span class="number">0</span>]);</span><br><span class="line">        R = <span class="built_in">max</span>(R, _ex.B.<span class="built_in">back</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = lb + <span class="number">1</span>; i &lt; rb; ++ i) &#123;</span><br><span class="line">            L = <span class="built_in">min</span>(L, block[i].B[<span class="number">0</span>] + block[i].ex);</span><br><span class="line">            R = <span class="built_in">max</span>(R, block[i].B.<span class="built_in">back</span>() + block[i].ex);</span><br><span class="line">        &#125;</span><br><span class="line">        L --, R ++;</span><br><span class="line">        <span class="keyword">while</span>(R &gt; L + <span class="number">1</span>) &#123;</span><br><span class="line">            ll M = L + R  &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            cnt += <span class="built_in">lower_bound</span>(_ex.B.<span class="built_in">begin</span>(), _ex.B.<span class="built_in">end</span>(), M) - _ex.B.<span class="built_in">begin</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = lb + <span class="number">1</span>; i &lt; rb; i ++) &#123;</span><br><span class="line">                cnt += <span class="built_in">lower_bound</span>(block[i].B.<span class="built_in">begin</span>(), block[i].B.<span class="built_in">end</span>(), M - block[i].ex) - block[i].B.<span class="built_in">begin</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt &gt;= k) R = M;</span><br><span class="line">            <span class="keyword">else</span> L = M;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    BS = <span class="number">912</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; <span class="number">1ll</span> * i * BS &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="type">int</span> l = i * BS, r = <span class="built_in">min</span>(n - <span class="number">1</span>, (i + <span class="number">1</span>) * BS - <span class="number">1</span>);</span><br><span class="line">        block.<span class="built_in">push_back</span>(<span class="built_in">BLOCK</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m --) &#123;</span><br><span class="line">        <span class="type">int</span> op, l, r, k;</span><br><span class="line">        <span class="built_in">read</span>(op, l, r, k);</span><br><span class="line">        l --, r --;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(r - l + <span class="number">1</span> &lt; k) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">query</span>(l, r, k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">add</span>(l, r, k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="弹飞绵羊"><a href="#弹飞绵羊" class="headerlink" title="弹飞绵羊"></a><a href="https://www.luogu.com.cn/problem/P3203">弹飞绵羊</a></h5><blockquote>
<p>有$n$个点，每个点都有一个值$k$，第$i$个点会通过一次弹射到$i + k_i$上，直到点不存在。两种操作，一种询问第$i$个点一共会经历几次弹射，另一种修改$k_i$。</p>
</blockquote>
<p>如果不存在修改操作，那么只需要预处理出所有点的答案，每次查询只需要$O(1)$的复杂度就可以求出解。而修改的操作是$O(n)$的，因此需要一种方法来平衡两种操作。发现可以将所有点任意地分割成$x$段，每一小段中的每个点都存在一个$k’_i$从所在段中弹飞，并且落到另一段中的某个点，因此可以记录每个段中每个点从所在段弹飞的所需的次数以及落点，此时每次修改只需要修改所在块即可。故得出解：将$n$个点分成$\sqrt n$段，同时记录次数和位置，修改就重构块，查询就对该点在所有块中的次数求和。两种操作的时间复杂度均为$\sqrt n$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">2e5</span> + <span class="number">400</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n, BS, m, B;</span><br><span class="line"><span class="type">int</span> a[MAXN], c[MAXN], to[MAXN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = r; i &gt;= l; i --) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i + a[i] &gt; r) &#123;</span><br><span class="line">            c[i] = <span class="number">1</span>;</span><br><span class="line">            to[i] = i + a[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[i] = c[i + a[i]] + <span class="number">1</span>;</span><br><span class="line">            to[i] = to[i + a[i]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, pos = x;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        res += c[pos];</span><br><span class="line">        pos = to[pos];</span><br><span class="line">    &#125; <span class="keyword">while</span>(pos &lt; n);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    BS = <span class="built_in">sqrt</span>(n) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i += BS) &#123;</span><br><span class="line">        <span class="built_in">upd</span>(i, <span class="built_in">min</span>(n - <span class="number">1</span>, i + BS - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span> (m --) &#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(x) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin &gt;&gt; y;</span><br><span class="line">            a[x] = y;</span><br><span class="line">            <span class="type">int</span> b = x / BS;</span><br><span class="line">            <span class="built_in">upd</span>(b * BS, <span class="built_in">min</span>(n - <span class="number">1</span>, (b + <span class="number">1</span>) * BS - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  <br/><br>  <br/></p>
<ul>
<li>有时间再补<br><a href="https://loj.ac/p/6546">简单的数列题</a><br><a href="https://www.luogu.com.cn/problem/P4135">作诗</a><br><a href="https://www.luogu.com.cn/problem/P4168">[Violet]蒲公英</a><br><a href="https://www.luogu.com.cn/problem/P5574">任务分配问题</a></li>
</ul>
]]></content>
      <categories>
        <category>算法笔记</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>分块</tag>
      </tags>
  </entry>
  <entry>
    <title>java备忘录</title>
    <url>/2022/11/16/java%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>— skip —</p>
]]></content>
      <categories>
        <category>编程技能</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>模运算规范及表达式求模板值</title>
    <url>/2022/10/30/%E6%A8%A1%E8%BF%90%E7%AE%97%E8%A7%84%E8%8C%83%E5%8F%8A%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E6%A8%A1%E6%9D%BF%E5%80%BC/</url>
    <content><![CDATA[<h3 id="模运算规范，避免不必要的数值越界"><a href="#模运算规范，避免不必要的数值越界" class="headerlink" title="模运算规范，避免不必要的数值越界"></a>模运算规范，避免不必要的数值越界</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="keyword">return</span> a + b &lt; mod ? a + b : a + b - mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="keyword">return</span> a &lt; b ? mod + a - b : a - b;&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">mul</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123; <span class="keyword">return</span> <span class="number">1ll</span> * a * b % mod; &#125;</span><br></pre></td></tr></table></figure>
<h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> CAL &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expression</span><span class="params">(<span class="type">char</span>*&amp;s)</span></span>;  <span class="comment">// 计算一个不带括号的表达式值</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">token</span><span class="params">(<span class="type">char</span>*&amp;s)</span> </span>&#123;      <span class="comment">// 取出一个值加入到栈中</span></span><br><span class="line">        <span class="keyword">if</span>(*s == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            s ++;</span><br><span class="line">            <span class="type">int</span> ret = <span class="built_in">expression</span>(s);</span><br><span class="line">            s ++;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="string">&#x27;0&#x27;</span> &lt;= *s &amp;&amp; *s &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            ret = ret * <span class="number">10</span> + *s++ - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rank</span><span class="params">(<span class="type">char</span> op)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(op) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>: <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">expression</span><span class="params">(<span class="type">char</span>*&amp;s)</span></span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; svar;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; sop;</span><br><span class="line">        svar.<span class="built_in">push</span>(<span class="built_in">token</span>(s));</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">char</span> op = *s;</span><br><span class="line">            <span class="keyword">if</span>(!op || op == <span class="string">&#x27;)&#x27;</span>) op = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">            <span class="keyword">else</span> s++;</span><br><span class="line">            <span class="keyword">while</span>(!sop.<span class="built_in">empty</span>() &amp;&amp; <span class="built_in">rank</span>(sop.<span class="built_in">top</span>()) &lt;= <span class="built_in">rank</span>(op))&#123;</span><br><span class="line">                <span class="type">int</span> b = svar.<span class="built_in">top</span>();</span><br><span class="line">                svar.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">int</span> a = svar.<span class="built_in">top</span>();</span><br><span class="line">                svar.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">switch</span>(sop.<span class="built_in">top</span>())&#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:&#123;</span><br><span class="line">                        svar.<span class="built_in">push</span>(<span class="built_in">add</span>(a, b));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:&#123;</span><br><span class="line">                        svar.<span class="built_in">push</span>(<span class="built_in">sub</span>(a, b));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>: &#123;</span><br><span class="line">                        svar.<span class="built_in">push</span>(<span class="built_in">mul</span>(a, b));</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                sop.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="string">&#x27;$&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            svar.<span class="built_in">push</span>(<span class="built_in">token</span>(s));</span><br><span class="line">            sop.<span class="built_in">push</span>(op);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> svar.<span class="built_in">top</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>模板</category>
      </categories>
      <tags>
        <tag>模拟表达式求值</tag>
      </tags>
  </entry>
  <entry>
    <title>基环树简述</title>
    <url>/2022/10/19/%E5%9F%BA%E7%8E%AF%E6%A0%91%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>基环树指$n$个点$n$条边的连通图, 仅比树多一条边, 有大部分树的性质.<br><img src="https://static01.imgkr.com/temp/daf52d93387f444ab74d26d08050ee10.png" alt="图1"></p>
<h3 id="重要的事-找环"><a href="#重要的事-找环" class="headerlink" title="重要的事 找环"></a>重要的事 找环</h3><p>tarjan找环, 给一份容易实现的代码（不能找重边和自环）<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line"><span class="keyword">namespace</span> Circle &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; circle; <span class="comment">// 环上的点</span></span><br><span class="line">    <span class="type">int</span> tag[MAXN]; <span class="comment">// 标记: -1未访问; 1访问过; 2在环上</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            tag[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[u] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        tag[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span>(v != f) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">            <span class="keyword">if</span>(t &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                circle.<span class="built_in">push_back</span>(u);</span><br><span class="line">                tag[u] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> t == u ? <span class="number">-1</span> : t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a><a href="https://www.luogu.com.cn/problem/P5022">旅行</a></h4><ul>
<li>题目大意: 给定一棵普通树或者基环树, 求访问全部节点最小的字典序(每个节点只记录第一次访问).</li>
<li>对于一般树, 可以$1$节点开始跑; 对于基环树, 可以删一条边使其变成普通树, 时间复杂度$O(n^2)$</li>
<li>参考代码<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span> + <span class="number">7</span>, MAXN = <span class="number">5e3</span> + <span class="number">10</span>, mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[MAXN];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res, ste;</span><br><span class="line"><span class="keyword">namespace</span> Circle &#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; circle;</span><br><span class="line">    <span class="type">int</span> tag[MAXN];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            tag[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> f)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[u] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> u;</span><br><span class="line">        &#125;</span><br><span class="line">        tag[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span>(v != f) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="built_in">dfs</span>(v, u);</span><br><span class="line">            <span class="keyword">if</span>(t &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                circle.<span class="built_in">push_back</span>(u);</span><br><span class="line">                tag[u] = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> t == u ? <span class="number">-1</span> : t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a, vector&lt;<span class="type">int</span>&gt; &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a.<span class="built_in">size</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != b[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> a[i] &gt; b[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> du = <span class="number">-1</span>, dv = <span class="number">-1</span>; <span class="comment">// 删的边</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    ste.<span class="built_in">push_back</span>(u);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v : G[u]) <span class="keyword">if</span>(v != p) &#123;</span><br><span class="line">        <span class="keyword">if</span>((du == u &amp;&amp; dv == v) || du == v &amp;&amp; dv == u) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++) &#123;</span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        u --, v --;</span><br><span class="line">        G[u].<span class="built_in">push_back</span>(v), G[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="built_in">sort</span>(G[i].<span class="built_in">begin</span>(), G[i].<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m == n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        res = ste;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Circle::<span class="built_in">init</span>();</span><br><span class="line">        Circle::<span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; Circle::circle.<span class="built_in">size</span>() - <span class="number">1</span>; i ++) &#123;</span><br><span class="line">            du = Circle::circle[i], dv = Circle::circle[i + <span class="number">1</span>];</span><br><span class="line">            ste.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">cmp</span>(res, ste)) &#123;</span><br><span class="line">                res = ste;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i : res) &#123;</span><br><span class="line">        cout &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>算法笔记</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>基环树</tag>
      </tags>
  </entry>
</search>
